/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ServiceService } from "../service.service";
import { ServiceCreateInput } from "./ServiceCreateInput";
import { Service } from "./Service";
import { Request } from "../../request/base/Request";
import { ServiceFindManyArgs } from "./ServiceFindManyArgs";
import { ServiceWhereUniqueInput } from "./ServiceWhereUniqueInput";
import { ServiceUpdateInput } from "./ServiceUpdateInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";

export class ServiceControllerBase {
  constructor(protected readonly service: ServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Service })
  async createService(
    @common.Body() data: ServiceCreateInput
  ): Promise<Service> {
    return await this.service.createService({
      data: {
        ...data,

        booking: data.booking
          ? {
              connect: data.booking,
            }
          : undefined,

        office: data.office
          ? {
              connect: data.office,
            }
          : undefined,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,

        serviceType: data.serviceType
          ? {
              connect: data.serviceType,
            }
          : undefined,
      },
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Service] })
  @ApiNestedQuery(ServiceFindManyArgs)
  async services(@common.Req() request: Request): Promise<Service[]> {
    const args = plainToClass(ServiceFindManyArgs, request.query);
    return this.service.services({
      ...args,
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async service(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    const result = await this.service.service({
      where: params,
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateService(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() data: ServiceUpdateInput
  ): Promise<Service | null> {
    try {
      return await this.service.updateService({
        where: params,
        data: {
          ...data,

          booking: data.booking
            ? {
                connect: data.booking,
              }
            : undefined,

          office: data.office
            ? {
                connect: data.office,
              }
            : undefined,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,

          serviceType: data.serviceType
            ? {
                connect: data.serviceType,
              }
            : undefined,
        },
        select: {
          basePrice: true,

          booking: {
            select: {
              id: true,
            },
          },

          category: true,
          createdAt: true,
          description: true,
          equipmentRequirements: true,
          estimatedDuration: true,
          id: true,

          office: {
            select: {
              id: true,
            },
          },

          operators: true,

          property: {
            select: {
              id: true,
            },
          },

          serviceType: {
            select: {
              id: true,
            },
          },

          specialInstructions: true,
          status: true,
          supervisor: true,
          taskForm: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Service })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteService(
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Service | null> {
    try {
      return await this.service.deleteService({
        where: params,
        select: {
          basePrice: true,

          booking: {
            select: {
              id: true,
            },
          },

          category: true,
          createdAt: true,
          description: true,
          equipmentRequirements: true,
          estimatedDuration: true,
          id: true,

          office: {
            select: {
              id: true,
            },
          },

          operators: true,

          property: {
            select: {
              id: true,
            },
          },

          serviceType: {
            select: {
              id: true,
            },
          },

          specialInstructions: true,
          status: true,
          supervisor: true,
          taskForm: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: ServiceWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        assignedTo: true,
        author: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        photos: true,
        priority: true,

        property: {
          select: {
            id: true,
          },
        },

        reportDatetime: true,
        reportName: true,
        reportStatus: true,
        reportType: true,
        resolutionComments: true,
        resolutionDate: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: ServiceWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateService({
      where: params,
      data,
      select: { id: true },
    });
  }
}
