/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { OfficeService } from "../office.service";
import { OfficeCreateInput } from "./OfficeCreateInput";
import { Office } from "./Office";
import { Request } from "../../request/base/Request";
import { OfficeFindManyArgs } from "./OfficeFindManyArgs";
import { OfficeWhereUniqueInput } from "./OfficeWhereUniqueInput";
import { OfficeUpdateInput } from "./OfficeUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";

export class OfficeControllerBase {
  constructor(protected readonly service: OfficeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Office })
  async createOffice(@common.Body() data: OfficeCreateInput): Promise<Office> {
    return await this.service.createOffice({
      data: data,
      select: {
        contactInformation: true,
        createdAt: true,
        currentBookings: true,
        franchisee: true,
        id: true,
        location: true,
        maxBookingCapacity: true,
        operatingHours: true,
        operationManagersIds: true,
        status: true,
        teamIds: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Office] })
  @ApiNestedQuery(OfficeFindManyArgs)
  async offices(@common.Req() request: Request): Promise<Office[]> {
    const args = plainToClass(OfficeFindManyArgs, request.query);
    return this.service.offices({
      ...args,
      select: {
        contactInformation: true,
        createdAt: true,
        currentBookings: true,
        franchisee: true,
        id: true,
        location: true,
        maxBookingCapacity: true,
        operatingHours: true,
        operationManagersIds: true,
        status: true,
        teamIds: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async office(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    const result = await this.service.office({
      where: params,
      select: {
        contactInformation: true,
        createdAt: true,
        currentBookings: true,
        franchisee: true,
        id: true,
        location: true,
        maxBookingCapacity: true,
        operatingHours: true,
        operationManagersIds: true,
        status: true,
        teamIds: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateOffice(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() data: OfficeUpdateInput
  ): Promise<Office | null> {
    try {
      return await this.service.updateOffice({
        where: params,
        data: data,
        select: {
          contactInformation: true,
          createdAt: true,
          currentBookings: true,
          franchisee: true,
          id: true,
          location: true,
          maxBookingCapacity: true,
          operatingHours: true,
          operationManagersIds: true,
          status: true,
          teamIds: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Office })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteOffice(
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Office | null> {
    try {
      return await this.service.deleteOffice({
        where: params,
        select: {
          contactInformation: true,
          createdAt: true,
          currentBookings: true,
          franchisee: true,
          id: true,
          location: true,
          maxBookingCapacity: true,
          operatingHours: true,
          operationManagersIds: true,
          status: true,
          teamIds: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        additionalInformation: true,
        additionalServices: true,
        bookingNotes: true,
        bookingPrice: true,
        bookingSource: true,
        bookingStatus: true,
        checkInDatetime: true,
        checkOutDatetime: true,
        client: true,
        createdAt: true,
        id: true,
        numberOfGuests: true,

        office: {
          select: {
            id: true,
          },
        },

        platformBookingId: true,
        platformCommissions: true,
        platformSource: true,
        principalService: true,
        productsReposition: true,

        property: {
          select: {
            id: true,
          },
        },

        synchronizationStatus: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        assignedTo: true,
        author: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        photos: true,
        priority: true,

        property: {
          select: {
            id: true,
          },
        },

        reportDatetime: true,
        reportName: true,
        reportStatus: true,
        reportType: true,
        resolutionComments: true,
        resolutionDate: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requests")
  @ApiNestedQuery(RequestFindManyArgs)
  async findRequests(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Request[]> {
    const query = plainToClass(RequestFindManyArgs, request.query);
    const results = await this.service.findRequests(params.id, {
      ...query,
      select: {
        acceptedProposal: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        documents: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        proposals: true,
        proposedDates: true,
        proposedValue: true,
        reason: true,

        report: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        requestType: true,
        requester: true,
        responder: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requests")
  async connectRequests(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requests")
  async updateRequests(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requests")
  async disconnectRequests(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: OfficeWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: OfficeWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateOffice({
      where: params,
      data,
      select: { id: true },
    });
  }
}
