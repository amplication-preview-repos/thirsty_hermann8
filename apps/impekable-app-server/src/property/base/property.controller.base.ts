/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PropertyService } from "../property.service";
import { PropertyCreateInput } from "./PropertyCreateInput";
import { Property } from "./Property";
import { Request } from "../../request/base/Request";
import { PropertyFindManyArgs } from "./PropertyFindManyArgs";
import { PropertyWhereUniqueInput } from "./PropertyWhereUniqueInput";
import { PropertyUpdateInput } from "./PropertyUpdateInput";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { BookingWhereUniqueInput } from "../../booking/base/BookingWhereUniqueInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";

export class PropertyControllerBase {
  constructor(protected readonly service: PropertyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Property })
  async createProperty(
    @common.Body() data: PropertyCreateInput
  ): Promise<Property> {
    return await this.service.createProperty({
      data: data,
      select: {
        additionalServices: true,
        address: true,
        cancellationPolicy: true,
        createdAt: true,
        emergencyContact: true,
        guestCapacity: true,
        houseRules: true,
        id: true,
        inventoryInstructions: true,
        laundryAgreement: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        principalService: true,
        productsReposition: true,
        propertyName: true,
        propertyType: true,
        qrCode: true,
        specialInstructions: true,
        squareMeters: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Property] })
  @ApiNestedQuery(PropertyFindManyArgs)
  async properties(@common.Req() request: Request): Promise<Property[]> {
    const args = plainToClass(PropertyFindManyArgs, request.query);
    return this.service.properties({
      ...args,
      select: {
        additionalServices: true,
        address: true,
        cancellationPolicy: true,
        createdAt: true,
        emergencyContact: true,
        guestCapacity: true,
        houseRules: true,
        id: true,
        inventoryInstructions: true,
        laundryAgreement: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        principalService: true,
        productsReposition: true,
        propertyName: true,
        propertyType: true,
        qrCode: true,
        specialInstructions: true,
        squareMeters: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async property(
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Property | null> {
    const result = await this.service.property({
      where: params,
      select: {
        additionalServices: true,
        address: true,
        cancellationPolicy: true,
        createdAt: true,
        emergencyContact: true,
        guestCapacity: true,
        houseRules: true,
        id: true,
        inventoryInstructions: true,
        laundryAgreement: true,
        numberOfBathrooms: true,
        numberOfBedrooms: true,
        principalService: true,
        productsReposition: true,
        propertyName: true,
        propertyType: true,
        qrCode: true,
        specialInstructions: true,
        squareMeters: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProperty(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() data: PropertyUpdateInput
  ): Promise<Property | null> {
    try {
      return await this.service.updateProperty({
        where: params,
        data: data,
        select: {
          additionalServices: true,
          address: true,
          cancellationPolicy: true,
          createdAt: true,
          emergencyContact: true,
          guestCapacity: true,
          houseRules: true,
          id: true,
          inventoryInstructions: true,
          laundryAgreement: true,
          numberOfBathrooms: true,
          numberOfBedrooms: true,
          principalService: true,
          productsReposition: true,
          propertyName: true,
          propertyType: true,
          qrCode: true,
          specialInstructions: true,
          squareMeters: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Property })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProperty(
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Property | null> {
    try {
      return await this.service.deleteProperty({
        where: params,
        select: {
          additionalServices: true,
          address: true,
          cancellationPolicy: true,
          createdAt: true,
          emergencyContact: true,
          guestCapacity: true,
          houseRules: true,
          id: true,
          inventoryInstructions: true,
          laundryAgreement: true,
          numberOfBathrooms: true,
          numberOfBedrooms: true,
          principalService: true,
          productsReposition: true,
          propertyName: true,
          propertyType: true,
          qrCode: true,
          specialInstructions: true,
          squareMeters: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bookings")
  @ApiNestedQuery(BookingFindManyArgs)
  async findBookings(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Booking[]> {
    const query = plainToClass(BookingFindManyArgs, request.query);
    const results = await this.service.findBookings(params.id, {
      ...query,
      select: {
        additionalInformation: true,
        additionalServices: true,
        bookingNotes: true,
        bookingPrice: true,
        bookingSource: true,
        bookingStatus: true,
        checkInDatetime: true,
        checkOutDatetime: true,
        client: true,
        createdAt: true,
        id: true,
        numberOfGuests: true,

        office: {
          select: {
            id: true,
          },
        },

        platformBookingId: true,
        platformCommissions: true,
        platformSource: true,
        principalService: true,
        productsReposition: true,

        property: {
          select: {
            id: true,
          },
        },

        synchronizationStatus: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bookings")
  async connectBookings(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bookings")
  async updateBookings(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bookings")
  async disconnectBookings(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: BookingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bookings: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        assignedTo: true,
        author: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        photos: true,
        priority: true,

        property: {
          select: {
            id: true,
          },
        },

        reportDatetime: true,
        reportName: true,
        reportStatus: true,
        reportType: true,
        resolutionComments: true,
        resolutionDate: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: PropertyWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: PropertyWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateProperty({
      where: params,
      data,
      select: { id: true },
    });
  }
}
