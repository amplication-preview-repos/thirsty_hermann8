/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ServiceType as PrismaServiceType,
  Service as PrismaService,
} from "@prisma/client";

export class ServiceTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ServiceTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.serviceType.count(args);
  }

  async serviceTypes(
    args: Prisma.ServiceTypeFindManyArgs
  ): Promise<PrismaServiceType[]> {
    return this.prisma.serviceType.findMany(args);
  }
  async serviceType(
    args: Prisma.ServiceTypeFindUniqueArgs
  ): Promise<PrismaServiceType | null> {
    return this.prisma.serviceType.findUnique(args);
  }
  async createServiceType(
    args: Prisma.ServiceTypeCreateArgs
  ): Promise<PrismaServiceType> {
    return this.prisma.serviceType.create(args);
  }
  async updateServiceType(
    args: Prisma.ServiceTypeUpdateArgs
  ): Promise<PrismaServiceType> {
    return this.prisma.serviceType.update(args);
  }
  async deleteServiceType(
    args: Prisma.ServiceTypeDeleteArgs
  ): Promise<PrismaServiceType> {
    return this.prisma.serviceType.delete(args);
  }

  async findServices(
    parentId: string,
    args: Prisma.ServiceFindManyArgs
  ): Promise<PrismaService[]> {
    return this.prisma.serviceType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .services(args);
  }
}
