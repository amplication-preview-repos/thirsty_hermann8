/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Report as PrismaReport,
  Request as PrismaRequest,
  Booking as PrismaBooking,
  Office as PrismaOffice,
  Property as PrismaProperty,
  Service as PrismaService,
} from "@prisma/client";

export class ReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReportCountArgs, "select">): Promise<number> {
    return this.prisma.report.count(args);
  }

  async reports(args: Prisma.ReportFindManyArgs): Promise<PrismaReport[]> {
    return this.prisma.report.findMany(args);
  }
  async report(
    args: Prisma.ReportFindUniqueArgs
  ): Promise<PrismaReport | null> {
    return this.prisma.report.findUnique(args);
  }
  async createReport(args: Prisma.ReportCreateArgs): Promise<PrismaReport> {
    return this.prisma.report.create(args);
  }
  async updateReport(args: Prisma.ReportUpdateArgs): Promise<PrismaReport> {
    return this.prisma.report.update(args);
  }
  async deleteReport(args: Prisma.ReportDeleteArgs): Promise<PrismaReport> {
    return this.prisma.report.delete(args);
  }

  async findRequests(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.report
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async getBooking(parentId: string): Promise<PrismaBooking | null> {
    return this.prisma.report
      .findUnique({
        where: { id: parentId },
      })
      .booking();
  }

  async getOffice(parentId: string): Promise<PrismaOffice | null> {
    return this.prisma.report
      .findUnique({
        where: { id: parentId },
      })
      .office();
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.report
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.report
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }
}
