/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Booking as PrismaBooking,
  Report as PrismaReport,
  Request as PrismaRequest,
  Service as PrismaService,
  Transaction as PrismaTransaction,
  Office as PrismaOffice,
  Property as PrismaProperty,
} from "@prisma/client";

export class BookingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BookingCountArgs, "select">): Promise<number> {
    return this.prisma.booking.count(args);
  }

  async bookings(args: Prisma.BookingFindManyArgs): Promise<PrismaBooking[]> {
    return this.prisma.booking.findMany(args);
  }
  async booking(
    args: Prisma.BookingFindUniqueArgs
  ): Promise<PrismaBooking | null> {
    return this.prisma.booking.findUnique(args);
  }
  async createBooking(args: Prisma.BookingCreateArgs): Promise<PrismaBooking> {
    return this.prisma.booking.create(args);
  }
  async updateBooking(args: Prisma.BookingUpdateArgs): Promise<PrismaBooking> {
    return this.prisma.booking.update(args);
  }
  async deleteBooking(args: Prisma.BookingDeleteArgs): Promise<PrismaBooking> {
    return this.prisma.booking.delete(args);
  }

  async findReports(
    parentId: string,
    args: Prisma.ReportFindManyArgs
  ): Promise<PrismaReport[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .reports(args);
  }

  async findRequests(
    parentId: string,
    args: Prisma.RequestFindManyArgs
  ): Promise<PrismaRequest[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requests(args);
  }

  async findServices(
    parentId: string,
    args: Prisma.ServiceFindManyArgs
  ): Promise<PrismaService[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .services(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.booking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getOffice(parentId: string): Promise<PrismaOffice | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .office();
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.booking
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }
}
