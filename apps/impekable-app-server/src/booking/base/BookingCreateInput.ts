/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsNumber,
  Min,
  Max,
  IsEnum,
  IsDate,
  IsInt,
  ValidateNested,
  IsBoolean,
} from "class-validator";

import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { EnumBookingBookingSource } from "./EnumBookingBookingSource";
import { EnumBookingBookingStatus } from "./EnumBookingBookingStatus";
import { Type } from "class-transformer";
import { OfficeWhereUniqueInput } from "../../office/base/OfficeWhereUniqueInput";
import { PropertyWhereUniqueInput } from "../../property/base/PropertyWhereUniqueInput";
import { ReportCreateNestedManyWithoutBookingsInput } from "./ReportCreateNestedManyWithoutBookingsInput";
import { RequestCreateNestedManyWithoutBookingsInput } from "./RequestCreateNestedManyWithoutBookingsInput";
import { ServiceCreateNestedManyWithoutBookingsInput } from "./ServiceCreateNestedManyWithoutBookingsInput";
import { EnumBookingSynchronizationStatus } from "./EnumBookingSynchronizationStatus";
import { TransactionCreateNestedManyWithoutBookingsInput } from "./TransactionCreateNestedManyWithoutBookingsInput";

@InputType()
class BookingCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  additionalInformation?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  additionalServices?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bookingNotes?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  bookingPrice?: number | null;

  @ApiProperty({
    required: false,
    enum: EnumBookingBookingSource,
  })
  @IsEnum(EnumBookingBookingSource)
  @IsOptional()
  @Field(() => EnumBookingBookingSource, {
    nullable: true,
  })
  bookingSource?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumBookingBookingStatus,
  })
  @IsEnum(EnumBookingBookingStatus)
  @IsOptional()
  @Field(() => EnumBookingBookingStatus, {
    nullable: true,
  })
  bookingStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  checkInDatetime?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  checkOutDatetime?: Date | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  client?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  numberOfGuests?: number | null;

  @ApiProperty({
    required: false,
    type: () => OfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => OfficeWhereUniqueInput, {
    nullable: true,
  })
  office?: OfficeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  platformBookingId?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  platformCommissions?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  platformSource?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  principalService?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  productsReposition?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => PropertyWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PropertyWhereUniqueInput)
  @IsOptional()
  @Field(() => PropertyWhereUniqueInput, {
    nullable: true,
  })
  property?: PropertyWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ReportCreateNestedManyWithoutBookingsInput,
  })
  @ValidateNested()
  @Type(() => ReportCreateNestedManyWithoutBookingsInput)
  @IsOptional()
  @Field(() => ReportCreateNestedManyWithoutBookingsInput, {
    nullable: true,
  })
  reports?: ReportCreateNestedManyWithoutBookingsInput;

  @ApiProperty({
    required: false,
    type: () => RequestCreateNestedManyWithoutBookingsInput,
  })
  @ValidateNested()
  @Type(() => RequestCreateNestedManyWithoutBookingsInput)
  @IsOptional()
  @Field(() => RequestCreateNestedManyWithoutBookingsInput, {
    nullable: true,
  })
  requests?: RequestCreateNestedManyWithoutBookingsInput;

  @ApiProperty({
    required: false,
    type: () => ServiceCreateNestedManyWithoutBookingsInput,
  })
  @ValidateNested()
  @Type(() => ServiceCreateNestedManyWithoutBookingsInput)
  @IsOptional()
  @Field(() => ServiceCreateNestedManyWithoutBookingsInput, {
    nullable: true,
  })
  services?: ServiceCreateNestedManyWithoutBookingsInput;

  @ApiProperty({
    required: false,
    enum: EnumBookingSynchronizationStatus,
  })
  @IsEnum(EnumBookingSynchronizationStatus)
  @IsOptional()
  @Field(() => EnumBookingSynchronizationStatus, {
    nullable: true,
  })
  synchronizationStatus?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutBookingsInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutBookingsInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutBookingsInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutBookingsInput;
}

export { BookingCreateInput as BookingCreateInput };
