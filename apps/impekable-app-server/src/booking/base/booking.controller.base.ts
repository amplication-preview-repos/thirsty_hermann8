/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookingService } from "../booking.service";
import { BookingCreateInput } from "./BookingCreateInput";
import { Booking } from "./Booking";
import { Request } from "../../request/base/Request";
import { BookingFindManyArgs } from "./BookingFindManyArgs";
import { BookingWhereUniqueInput } from "./BookingWhereUniqueInput";
import { BookingUpdateInput } from "./BookingUpdateInput";
import { ReportFindManyArgs } from "../../report/base/ReportFindManyArgs";
import { Report } from "../../report/base/Report";
import { ReportWhereUniqueInput } from "../../report/base/ReportWhereUniqueInput";
import { RequestFindManyArgs } from "../../request/base/RequestFindManyArgs";
import { RequestWhereUniqueInput } from "../../request/base/RequestWhereUniqueInput";
import { ServiceFindManyArgs } from "../../service/base/ServiceFindManyArgs";
import { Service } from "../../service/base/Service";
import { ServiceWhereUniqueInput } from "../../service/base/ServiceWhereUniqueInput";
import { TransactionFindManyArgs } from "../../transaction/base/TransactionFindManyArgs";
import { Transaction } from "../../transaction/base/Transaction";
import { TransactionWhereUniqueInput } from "../../transaction/base/TransactionWhereUniqueInput";

export class BookingControllerBase {
  constructor(protected readonly service: BookingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Booking })
  async createBooking(
    @common.Body() data: BookingCreateInput
  ): Promise<Booking> {
    return await this.service.createBooking({
      data: {
        ...data,

        office: data.office
          ? {
              connect: data.office,
            }
          : undefined,

        property: data.property
          ? {
              connect: data.property,
            }
          : undefined,
      },
      select: {
        additionalInformation: true,
        additionalServices: true,
        bookingNotes: true,
        bookingPrice: true,
        bookingSource: true,
        bookingStatus: true,
        checkInDatetime: true,
        checkOutDatetime: true,
        client: true,
        createdAt: true,
        id: true,
        numberOfGuests: true,

        office: {
          select: {
            id: true,
          },
        },

        platformBookingId: true,
        platformCommissions: true,
        platformSource: true,
        principalService: true,
        productsReposition: true,

        property: {
          select: {
            id: true,
          },
        },

        synchronizationStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Booking] })
  @ApiNestedQuery(BookingFindManyArgs)
  async bookings(@common.Req() request: Request): Promise<Booking[]> {
    const args = plainToClass(BookingFindManyArgs, request.query);
    return this.service.bookings({
      ...args,
      select: {
        additionalInformation: true,
        additionalServices: true,
        bookingNotes: true,
        bookingPrice: true,
        bookingSource: true,
        bookingStatus: true,
        checkInDatetime: true,
        checkOutDatetime: true,
        client: true,
        createdAt: true,
        id: true,
        numberOfGuests: true,

        office: {
          select: {
            id: true,
          },
        },

        platformBookingId: true,
        platformCommissions: true,
        platformSource: true,
        principalService: true,
        productsReposition: true,

        property: {
          select: {
            id: true,
          },
        },

        synchronizationStatus: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async booking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    const result = await this.service.booking({
      where: params,
      select: {
        additionalInformation: true,
        additionalServices: true,
        bookingNotes: true,
        bookingPrice: true,
        bookingSource: true,
        bookingStatus: true,
        checkInDatetime: true,
        checkOutDatetime: true,
        client: true,
        createdAt: true,
        id: true,
        numberOfGuests: true,

        office: {
          select: {
            id: true,
          },
        },

        platformBookingId: true,
        platformCommissions: true,
        platformSource: true,
        principalService: true,
        productsReposition: true,

        property: {
          select: {
            id: true,
          },
        },

        synchronizationStatus: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBooking(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() data: BookingUpdateInput
  ): Promise<Booking | null> {
    try {
      return await this.service.updateBooking({
        where: params,
        data: {
          ...data,

          office: data.office
            ? {
                connect: data.office,
              }
            : undefined,

          property: data.property
            ? {
                connect: data.property,
              }
            : undefined,
        },
        select: {
          additionalInformation: true,
          additionalServices: true,
          bookingNotes: true,
          bookingPrice: true,
          bookingSource: true,
          bookingStatus: true,
          checkInDatetime: true,
          checkOutDatetime: true,
          client: true,
          createdAt: true,
          id: true,
          numberOfGuests: true,

          office: {
            select: {
              id: true,
            },
          },

          platformBookingId: true,
          platformCommissions: true,
          platformSource: true,
          principalService: true,
          productsReposition: true,

          property: {
            select: {
              id: true,
            },
          },

          synchronizationStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Booking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBooking(
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Booking | null> {
    try {
      return await this.service.deleteBooking({
        where: params,
        select: {
          additionalInformation: true,
          additionalServices: true,
          bookingNotes: true,
          bookingPrice: true,
          bookingSource: true,
          bookingStatus: true,
          checkInDatetime: true,
          checkOutDatetime: true,
          client: true,
          createdAt: true,
          id: true,
          numberOfGuests: true,

          office: {
            select: {
              id: true,
            },
          },

          platformBookingId: true,
          platformCommissions: true,
          platformSource: true,
          principalService: true,
          productsReposition: true,

          property: {
            select: {
              id: true,
            },
          },

          synchronizationStatus: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/reports")
  @ApiNestedQuery(ReportFindManyArgs)
  async findReports(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Report[]> {
    const query = plainToClass(ReportFindManyArgs, request.query);
    const results = await this.service.findReports(params.id, {
      ...query,
      select: {
        assignedTo: true,
        author: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        photos: true,
        priority: true,

        property: {
          select: {
            id: true,
          },
        },

        reportDatetime: true,
        reportName: true,
        reportStatus: true,
        reportType: true,
        resolutionComments: true,
        resolutionDate: true,

        service: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/reports")
  async connectReports(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/reports")
  async updateReports(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/reports")
  async disconnectReports(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      reports: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requests")
  @ApiNestedQuery(RequestFindManyArgs)
  async findRequests(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Request[]> {
    const query = plainToClass(RequestFindManyArgs, request.query);
    const results = await this.service.findRequests(params.id, {
      ...query,
      select: {
        acceptedProposal: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        documents: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        proposals: true,
        proposedDates: true,
        proposedValue: true,
        reason: true,

        report: {
          select: {
            id: true,
          },
        },

        requestDate: true,
        requestType: true,
        requester: true,
        responder: true,
        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requests")
  async connectRequests(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requests")
  async updateRequests(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requests")
  async disconnectRequests(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: RequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requests: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/services")
  @ApiNestedQuery(ServiceFindManyArgs)
  async findServices(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Service[]> {
    const query = plainToClass(ServiceFindManyArgs, request.query);
    const results = await this.service.findServices(params.id, {
      ...query,
      select: {
        basePrice: true,

        booking: {
          select: {
            id: true,
          },
        },

        category: true,
        createdAt: true,
        description: true,
        equipmentRequirements: true,
        estimatedDuration: true,
        id: true,

        office: {
          select: {
            id: true,
          },
        },

        operators: true,

        property: {
          select: {
            id: true,
          },
        },

        serviceType: {
          select: {
            id: true,
          },
        },

        specialInstructions: true,
        status: true,
        supervisor: true,
        taskForm: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/services")
  async connectServices(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/services")
  async updateServices(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/services")
  async disconnectServices(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: ServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      services: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/transactions")
  @ApiNestedQuery(TransactionFindManyArgs)
  async findTransactions(
    @common.Req() request: Request,
    @common.Param() params: BookingWhereUniqueInput
  ): Promise<Transaction[]> {
    const query = plainToClass(TransactionFindManyArgs, request.query);
    const results = await this.service.findTransactions(params.id, {
      ...query,
      select: {
        amount: true,

        booking: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        paymentDetails: true,
        paymentMethod: true,
        postBalance: true,
        previousBalance: true,
        receiverUser: true,
        senderUser: true,
        status: true,
        transactionDate: true,
        transactionType: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/transactions")
  async connectTransactions(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        connect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/transactions")
  async updateTransactions(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        set: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/transactions")
  async disconnectTransactions(
    @common.Param() params: BookingWhereUniqueInput,
    @common.Body() body: TransactionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      transactions: {
        disconnect: body,
      },
    };
    await this.service.updateBooking({
      where: params,
      data,
      select: { id: true },
    });
  }
}
